package rules.tradeManagement;

import org.trading.model.*;
import org.trading.event.*
import org.trading.ChannelIds
import org.trading.command.DeleteWorkingOrderCommand;
import java.util.List
import org.trading.command.CreateWorkingOrderCommand;

dialect  "mvel"

//rule "Open a BUY order when price over openingen range high"
//    when
//      MarketInfo(latestAccountEquity != null)
//      $mp: MidPrice($e: epic) from entry-point "MID_PRICE"
//      $openingRange: OpeningRange(epic == $e, $target: midHigh)
//      not Position(epic == $e)
//      not Order(epic == $e, direction == "BUY")
//      $atr: AtrEvent(epic == $e)
//      Boolean(booleanValue == true) from $mp.isOver($openingRange, $atr)
//    then
//      insert(new Order($e, "BUY", "dealid", $target, "SENT"));
//      channels[ChannelIds.CREATE_WORKING_ORDER].send(new CreateWorkingOrderCommand($e));
//end
//
//rule "Open a SELL order when price under openingen range low"
//    when
//      $mp: MidPrice($e: epic) from entry-point "MID_PRICE"
//      $openingRange: OpeningRange(epic == $e, $target: midLow)
//      not Position(epic == $e)
//      not Order(epic == $e, direction == "SELL")
//      $atr: Atr(epic == $e)
//      Boolean(booleanValue == true) from $mp.isUnder($openingRange, $atr)
//    then
//      insert(new Order($e, "SELL", "dealid", $target, "SENT"));
//      channels[ChannelIds.CREATE_WORKING_ORDER].send(new CreateWorkingOrderCommand($e));
//end
//
//rule "Open a SELL order when price inside opening range and opening range is large enogh"
//    when
//      $mp: MidPrice($e: epic) from entry-point "MID_PRICE"
//      $atr: Atr(epic == $e)
//      $openingRange: OpeningRange(epic == $e, $target: midHigh, isLargeEnough($atr))
//      not Position(epic == $e)
//      not Order(epic == $e, direction == "SELL")
//      Boolean(booleanValue == true) from $mp.isInside($openingRange, $atr)
//    then
//      insert(new Order($e, "SELL", "dealid", $target, "SENT"));
//      channels[ChannelIds.CREATE_WORKING_ORDER].send(new CreateWorkingOrderCommand($e));
//end
//
//rule "Open a BUY order when price inside opening range and opening range is large enogh"
//    when
//      $mp: MidPrice($e: epic) from entry-point "MID_PRICE"
//      $atr: Atr(epic == $e)
//      $openingRange: OpeningRange(epic == $e, $target: midLow, isLargeEnough($atr))
//      not Position(epic == $e)
//      not Order(epic == $e, direction == "BUY")
//      Boolean(booleanValue == true) from $mp.isInside($openingRange, $atr)
//    then
//      insert(new Order($e, "BUY", "dealid", $target, "SENT"));
//      channels[ChannelIds.CREATE_WORKING_ORDER].send(new CreateWorkingOrderCommand($e));
//end
//
//rule "When position is entered and in profit activate trailing stop"
//  when
//    $mp: MidPrice($e: epic, $l: level) from entry-point "MID_PRICE"
//    $p: Position(epic == $e, state == "CREATED", isInProfit($l))
//  then
//      modify($p){setState("TRAILING_STOP_REQUESTED")}
//      channels[ChannelIds.UPDATE_POSITION].send(new UpdateWorkingOrderCommand($e));
//end
//
//query "Get Last 5min mid prices"
//  $mp: MidPrice() over window:time(5m) from entry-point "MID_PRICE"
//end
rule "If SELL rejected close BUY"
    when
      $so: Order($e: epic, direction == "SELL", state == "REJECTED")
      $bo: Order(epic == $e, direction == "BUY")
    then
      channels[ChannelIds.DELETE_WORKING_ORDER].send(new DeleteWorkingOrderCommand($bo.getEpic()));
end

rule "If BUY rejected close SELL"
    when
      $bo: Order($e: epic, direction == "BUY")
      $so: Order(epic == $e, direction == "SELL", state == "REJECTED")
    then
      channels[ChannelIds.DELETE_WORKING_ORDER].send(new DeleteWorkingOrderCommand($so.getEpic()));
end

rule "If there only is one order and that is rejected delete order from working memory"
    when
      $os: List(size == 1) from collect (Order($e: epic, direction == "BUY"))
    then
      delete($os.get(1));
end
